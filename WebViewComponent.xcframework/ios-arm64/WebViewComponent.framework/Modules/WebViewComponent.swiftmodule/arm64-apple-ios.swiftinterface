// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WebViewComponent
import NACoreUI
import NACoreUtils
import NADomain
import NALocalization
import NATheme
import NetAloCoreComponent
import NetAloLite
import Resolver
import RxCocoa
import RxSwift
import Swift
import UIKit.UIImage
import UIKit
import WebKit
@_exported import WebViewComponent
import XCoordinator
import _Concurrency
public enum WebviewRoute : XCoordinator.Route {
  case main
  case back
  public static func == (a: WebViewComponent.WebviewRoute, b: WebViewComponent.WebviewRoute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class WebViewCoordinator : XCoordinator.NavigationCoordinator<WebViewComponent.WebviewRoute>, NACoreUtils.EventPublisherType {
  public var eventPublisher: RxSwift.PublishSubject<WebViewComponent.WebViewComponentManager.Event>
  public init(navigation: UIKit.UINavigationController?, type: WebViewComponent.WebViewType)
  override public func prepareTransition(for route: WebViewComponent.WebviewRoute) -> XCoordinator.NavigationTransition
  public typealias Event = WebViewComponent.WebViewComponentManager.Event
  @objc deinit
}
open class WebViewComponentManager : NACoreUtils.ViewModelType {
  public enum Event {
    case backToAccount
    case releaseIfNeed
    public static func == (a: WebViewComponent.WebViewComponentManager.Event, b: WebViewComponent.WebViewComponentManager.Event) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public struct Input {
    public init(navigation: UIKit.UINavigationController?, type: WebViewComponent.WebViewType)
  }
  public struct Output {
    public let rootCoodinator: WebViewComponent.WebViewCoordinator
    public let eventObservable: RxSwift.Observable<WebViewComponent.WebViewComponentManager.Event>
    public let type: WebViewComponent.WebViewType
  }
  public func transform(input: WebViewComponent.WebViewComponentManager.Input) -> WebViewComponent.WebViewComponentManager.Output
  @objc deinit
}
public struct WebViewType {
  public let title: Swift.String
  public let link: Swift.String
  public static let FAQ: WebViewComponent.WebViewType
  public static let Term: WebViewComponent.WebViewType
}
extension WebViewComponent.WebviewRoute : Swift.Equatable {}
extension WebViewComponent.WebviewRoute : Swift.Hashable {}
extension WebViewComponent.WebViewComponentManager.Event : Swift.Equatable {}
extension WebViewComponent.WebViewComponentManager.Event : Swift.Hashable {}
