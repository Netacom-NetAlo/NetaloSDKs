// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ForwardMessageComponent
import AVKit
@_exported import ForwardMessageComponent
import NACoreUI
import NACoreUtils
import NADomain
import NALocalization
import NATheme
import NetAloCoreComponent
import NetAloLite
import Resolver
import RxCocoa
import RxSwift
import Swift
import UIKit
import XCoordinator
import _Concurrency
public enum ForwardMessageRoute : XCoordinator.Route {
  case main(ForwardMessageComponent.ForwardMessageComponentManager.ForwardMessageType)
  case alert(alertVM: NetAloCoreComponent.NAAlertVM)
  case dismiss
}
public class ForwardMessageCoordinator : XCoordinator.NavigationCoordinator<ForwardMessageComponent.ForwardMessageRoute>, NACoreUtils.EventPublisherType, NACoreUI.NavigatableCoordinator {
  public var eventPublisher: RxSwift.PublishSubject<ForwardMessageComponent.ForwardMessageComponentManager.Event>
  public init(navigation: UIKit.UINavigationController? = nil, data: ForwardMessageComponent.ForwardMessageComponentManager.ForwardMessageType)
  override public func prepareTransition(for route: ForwardMessageComponent.ForwardMessageRoute) -> XCoordinator.NavigationTransition
  public var rootVC: UIKit.UINavigationController {
    get
  }
  public var lastChild: NACoreUI.NavigatableCoordinator? {
    get
  }
  public func dismissAllChildren()
  public typealias Event = ForwardMessageComponent.ForwardMessageComponentManager.Event
  @objc deinit
}
open class ForwardMessageComponentManager : NACoreUtils.ViewModelType {
  public enum ForwardMessageType {
    case video(NADomain.NAMediaLibraryModel)
    case image(NADomain.NAMediaLibraryModel, Foundation.Data?)
    case message(NADomain.NAMessage)
  }
  public enum Event {
    case releaseIfNeeded
    case forwardToGroup(NADomain.NAMessage, NADomain.NAGroup)
    case forwardToContact(NADomain.NAMessage, NADomain.NAContact)
  }
  public init()
  public struct Input {
    public init(navigation: UIKit.UINavigationController?, data: ForwardMessageComponent.ForwardMessageComponentManager.ForwardMessageType)
  }
  public struct Output {
    public let rootCoodinator: ForwardMessageComponent.ForwardMessageCoordinator
    public let eventObservable: RxSwift.Observable<ForwardMessageComponent.ForwardMessageComponentManager.Event>
  }
  public func transform(input: ForwardMessageComponent.ForwardMessageComponentManager.Input) -> ForwardMessageComponent.ForwardMessageComponentManager.Output
  @objc deinit
}
